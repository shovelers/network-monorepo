<!DOCTYPE html>
<html lang="en" data-theme="light">
  <head>
    <link rel="stylesheet" href="/styles/style.css" />
    <link rel="icon" href="/favicon.ico">
    <script src="https://cdn.jsdelivr.net/gh/papnkukn/qrcode-svg/dist/qrcode.min.js"></script>
    <title>Rolodex App</title>
  </head>

  <%- include('../partials/google_analytics.ejs') %>

  <body class="antialiased bg-base-100">
    <script type="module">      
      import { getProfile, account ,createCommunityProfile } from '/odd.js';
      var communityDID = '<%- communityDID %>'
      var communityName = '<%- communityName %>'
      
      // show values from farcaster
      getProfile().then((result) => {
        console.log(result)
        document.querySelector("#farcaster-name").innerHTML = result.name
        document.querySelector("#farcaster-handle").innerHTML = result.handle
        document.querySelector("#farcaster-bio").innerHTML = result.text
      })

      window.showLoading = function(){
        document.querySelector(".loading").classList.remove("hidden");
        document.querySelector("#input-forms").classList.add("hidden");
      }

      if (mixpanel) {
        mixpanel.identify(await shovel.agent.accountDID())
      }

      function extractInputMap(schema) {
        const inputsMap = {};

        if (schema.properties && schema.properties.inputs && schema.properties.inputs.properties) {
          const inputs = schema.properties.inputs.properties;

          for (const [key, value] of Object.entries(inputs)) {
            if (value.items && value.items.enum) {
              inputsMap[key] = {
                label: value.title || key,
                symbols: value.items.enum
              };
            }
          }
        }

        return inputsMap;
      }
      let options, schema, submit;

      account.requestChallenge(communityDID).then((data) => {
        console.log("Challenge data:", data)
        schema = data.challenge.challenge.profileSchema
        submit = data.submit
        options = extractInputMap(schema)
        window.data = data

        let html = ""
        for (const key in options) {
          html = html + `<div class="space-y-2">
                        <div class="font-semibold text-md">${options[key]["label"]}</div>`
          for(var i=0; i<options[key]["symbols"].length; i++) {
            html = html + `<div id="color-changing-badge" class="badge badge-lg badge-outline cursor-pointer" data-is-clicked="false" question="${key}">${options[key]["symbols"][i]}</div>`
          }
          html = html + `</div>`
        }

        html = html + `<div class="flex justify-center">
            <div class="hidden loading loading-infinity loading-lg"></div>
            <button id="form-submit-btn" class="btn" onclick="addSelectedTagsToProfile()"> Submit </button>
          </div>`

        document.getElementById("community-form").innerHTML = html

        const badges = [...document.querySelectorAll('#color-changing-badge')];
        badges.forEach((badge) =>
          badge.addEventListener('click', () => {
            let isClicked = badge.getAttribute('data-is-clicked')
            let question = badge.getAttribute('question')
            if (isClicked === "false") {
              badge.classList.remove('badge-outline');
              badge.classList.add('badge-secondary');
              badge.setAttribute('data-is-clicked', true)
            } else {
              badge.classList.remove('badge-secondary');
              badge.classList.add('badge-outline');
              badge.setAttribute('data-is-clicked', false)
            }
          })
        )
      })

      // add selected tags to profile on save
      window.addSelectedTagsToProfile = async function(){
        document.querySelector("#form-submit-btn").classList.add("hidden");
        document.querySelector(".loading").classList.remove("hidden");

        var param = {}
        for (const key in options) {
          param[key] = Array.from(document.querySelectorAll(`#color-changing-badge[question=${key}][data-is-clicked="true"]`)).map( e => e.innerHTML)
        }
        await createCommunityProfile(param, communityDID, schema)
        
        let profile = await getProfile()
        console.log("Profile after save :", profile)
        const success = await submit() 

        if (success) {
          window.location.href = `/directory/${communityDID}?name=${communityName}`;
        } else {
          alert("Handshake Rejected, refresh and try again")
        }
      }

    </script>

    <div class="container mx-auto px-4 h-screen flex flex-col justify-evenly items-center">
      <div class="flex flex-row h-3/4 w-full">
        <%/* farcaster info */%>
        <div class="flex flex-col gap-4 p-8 text-center justify-center place-content-center items-center">
          <div class="font-semibold text-md">Farcaster Profile</div>
          <div class="bg-base-200 p-4 w-2/3 text-left">
            <div class="font-semibold">Name : <span id="farcaster-name" class="font-normal"></span></div>
            <div class="font-semibold">Handle : <span id="farcaster-handle" class="font-normal"></span></div>
            <div class="font-semibold">Bio : <span id="farcaster-bio" class="font-normal"></span></div>
          </div>
          <div>To Introduce you to the right members <span class="uppercase text-semibold font-lg text-blue-500"><%= communityName %></span> wants to know you a bit better</div>
        </div>
        <%/* divider */%>
        <div class="divider divider-horizontal"></div>
        <%/* form half */%>
        <div id="community-form" class="flex flex-col justify-evenly place-content-center w-1/2 p-8">
          <div class="loading loading-infinity loading-lg"></div>
        </div>  
      </div>
      
      <%- include('../partials/shovel.ejs') %>
    </div>
  </body>
</html>
